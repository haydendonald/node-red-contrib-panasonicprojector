import { CommandType } from './Types';
import { ConverterInterface } from './Converters';
export interface CommandInterface {
    name: string;
    subname?: string;
    label: string;
    type: CommandType;
    getQueryCommand(): string | undefined;
    parseResponse(response: string): any;
    getSetCommand(value?: any | undefined): string | undefined;
    getName(): string;
}
export interface GenericCommandInterface<T> extends CommandInterface {
    parseResponse(response: string): T | undefined;
    getSetCommand(value?: T | undefined): string | undefined;
}
export interface CommandOptionInterface {
    subname?: string;
    queryCommand?: string;
    setPrefix?: string;
    setCommand?: string;
    setOperator?: string;
}
export declare class GenericCommand<T> implements GenericCommandInterface<T> {
    name: string;
    subname: string | undefined;
    label: string;
    type: CommandType;
    private queryCommand;
    private setCommand;
    private setOperator;
    private converter;
    constructor(name: string, label: string, converter: ConverterInterface<T>, options?: CommandOptionInterface);
    private buildName;
    getName(): string;
    parseResponse(response: string): T | undefined;
    getSetCommand(value?: T | undefined): string | undefined;
    getQueryCommand(): string;
}
export declare class BinaryCommand<T> implements GenericCommandInterface<T> {
    name: string;
    label: string;
    type: CommandType;
    private converter;
    constructor(name: string, label: string, converter: ConverterInterface<T>);
    getName(): string;
    parseResponse(response: string): T | undefined;
    getSetCommand(value?: T | undefined): string | undefined;
    getQueryCommand(): string | undefined;
}
