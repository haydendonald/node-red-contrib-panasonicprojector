/// <reference types="node" />
import { EventEmitter } from 'events';
import { Client } from './Client';
import { ProjectorInput } from './Types';
import { CommandInterface, GenericCommandInterface } from './GenericCommands';
export declare class Projector extends EventEmitter {
    model: string | undefined;
    name: string | undefined;
    private connection;
    private queryList;
    private queryIndex;
    private queryStateInterval;
    private authLogPending;
    private log;
    static Events: {
        STATE_CHANGE: string;
    };
    constructor(connection: Client, log?: (level: string, msg: string) => void);
    updateConnection(connection: Client): void;
    sendQuery(command: CommandInterface): Promise<string | undefined>;
    sendValue<T>(command: GenericCommandInterface<T>, value?: T | undefined): Promise<string | undefined>;
    getValue<T>(cmd: GenericCommandInterface<T>): Promise<T | undefined>;
    /**
     * Adds command to a list of cyclic queried commands.
     * If the result of a command changes, a 'state_change' is triggered
     * with the following signate: (command_label, new_value)
     * @param command The command to be monitored (cyclic querying of the projector)
     */
    addMonitoring<T>(command: GenericCommandInterface<T>): void;
    removeMonitoring<T>(command: GenericCommandInterface<T>): boolean;
    private sendToggleCommand;
    setPower(power?: boolean | undefined): void;
    setFreeze(freeze?: boolean | undefined): void;
    setShutter(shutter?: boolean | undefined): void;
    setInput(input: ProjectorInput): void;
    private init;
    private queryState;
    private onError;
}
