import { RgbValue, GridSettings } from './Types';
export interface ConverterInterface<T> {
    parse(value: string): T | undefined;
    format(value: T | undefined): string | undefined;
}
declare class StringConverter implements ConverterInterface<string> {
    parse(value: string): string | undefined;
    format(value: string | undefined): string | undefined;
}
export declare const DefaultStringConverter: StringConverter;
export declare class NumberConverter implements ConverterInterface<number> {
    private min;
    private offset;
    private paddingCount;
    private includeSign;
    constructor(min: number, paddingCount: number, minFormatted?: number, includeSign?: boolean);
    parse(value: string): number | undefined;
    format(value: number | undefined): string | undefined;
}
export declare class BooleanConverter implements ConverterInterface<boolean> {
    private queryOnValue;
    private queryOffValue;
    private setOnValue;
    private setOffValue;
    constructor(queryOnValue?: string, queryOffValue?: string, setOnValue?: string, setOffValue?: string);
    parse(response: string): boolean | undefined;
    format(value: boolean | undefined): string | undefined;
}
export declare const DefaultBooleanConverter: BooleanConverter;
export declare class EnumConverter<T extends string> implements ConverterInterface<T> {
    parse(value: string): T | undefined;
    format(value: T | undefined): string | undefined;
}
declare class RgbConverter implements ConverterInterface<RgbValue> {
    private static baseConverter;
    parse(value: string): RgbValue | undefined;
    format(value: RgbValue | undefined): string | undefined;
}
export declare const DefaultRgbConverter: RgbConverter;
declare class GridSettingsConverter implements ConverterInterface<GridSettings> {
    parse(value: string): GridSettings | undefined;
    format(value: GridSettings | undefined): string | undefined;
}
export declare const DefaultGridSettingConverter: GridSettingsConverter;
export {};
