"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultGridSettingConverter = exports.DefaultRgbConverter = exports.EnumConverter = exports.DefaultBooleanConverter = exports.BooleanConverter = exports.NumberConverter = exports.DefaultStringConverter = void 0;
const Types_1 = require("./Types");
class StringConverter {
    parse(value) {
        return value;
    }
    format(value) {
        return value;
    }
}
exports.DefaultStringConverter = new StringConverter();
class NumberConverter {
    constructor(min, paddingCount, minFormatted, includeSign) {
        this.min = min;
        this.paddingCount = paddingCount;
        minFormatted = minFormatted === undefined ? min : minFormatted;
        this.offset = minFormatted - min;
        if (includeSign !== undefined) {
            this.includeSign = includeSign;
        }
        else {
            this.includeSign = (this.min + this.offset) < 0;
        }
    }
    parse(value) {
        const result = parseInt(value, 10) - this.offset;
        return isNaN(result) ? undefined : result;
    }
    format(value) {
        if (value === undefined)
            return undefined;
        const offsettedValue = value + this.offset;
        const signLessValue = (offsettedValue < 0) ? (-1 * offsettedValue) : offsettedValue;
        let formattedValue = ('' + signLessValue).padStart(this.paddingCount, '0');
        if (this.includeSign) {
            formattedValue = (offsettedValue < 0 ? '-' : '+') + formattedValue;
        }
        return formattedValue;
    }
}
exports.NumberConverter = NumberConverter;
class BooleanConverter {
    constructor(queryOnValue = '1', queryOffValue = '0', setOnValue, setOffValue) {
        this.queryOnValue = queryOnValue;
        this.queryOffValue = queryOffValue;
        this.setOnValue = setOnValue === undefined ? queryOnValue : setOnValue;
        this.setOffValue = setOffValue === undefined ? queryOffValue : setOffValue;
    }
    parse(response) {
        if (response === this.queryOnValue)
            return true;
        if (response === this.queryOffValue)
            return false;
        return undefined;
    }
    format(value) {
        if (value === undefined)
            return undefined;
        return value ? this.setOnValue : this.setOffValue;
    }
}
exports.BooleanConverter = BooleanConverter;
exports.DefaultBooleanConverter = new BooleanConverter();
class EnumConverter {
    parse(value) {
        return value;
    }
    format(value) {
        if (value === undefined)
            return undefined;
        return '' + value;
    }
}
exports.EnumConverter = EnumConverter;
class RgbConverter {
    parse(value) {
        const parts = value.split(',');
        if (parts.length !== 3)
            return undefined;
        return {
            R: RgbConverter.baseConverter.parse(parts[0]) || 0,
            G: RgbConverter.baseConverter.parse(parts[1]) || 0,
            B: RgbConverter.baseConverter.parse(parts[2]) || 0
        };
    }
    format(value) {
        if (value === undefined)
            return undefined;
        const parts = [
            RgbConverter.baseConverter.format(value.R),
            RgbConverter.baseConverter.format(value.G),
            RgbConverter.baseConverter.format(value.B)
        ];
        return parts.join(',');
    }
}
RgbConverter.baseConverter = new NumberConverter(0, 4, 0);
exports.DefaultRgbConverter = new RgbConverter();
class GridSettingsConverter {
    parse(value) {
        if (!/^[0-9A-F]{12}$/.test(value))
            return undefined;
        const enabled = value.substring(0, 2) === '01';
        const color = value.substring(6, 12);
        const result = {
            mode: enabled ? color : Types_1.DisplayGridLines.OFF,
            verticalLines: parseInt(value.substring(2, 4), 16),
            horizontalLines: parseInt(value.substring(4, 6), 16)
        };
        return result;
    }
    format(value) {
        if (value === undefined || value.horizontalLines > 255 || value.verticalLines > 255) {
            return undefined;
        }
        return (value.mode === Types_1.DisplayGridLines.OFF ? '00' : '01')
            + value.verticalLines.toString(16).toUpperCase().padStart(2, '0')
            + value.horizontalLines.toString(16).toUpperCase().padStart(2, '0')
            + value.mode;
    }
}
exports.DefaultGridSettingConverter = new GridSettingsConverter();
//# sourceMappingURL=Converters.js.map